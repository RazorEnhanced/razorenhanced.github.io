# This is a basic workflow that is manually triggered

name: AutoDoc API

# Controls when the action will run.
on:
  workflow_dispatch:
  push:

jobs:
  rebuild_docs:
    runs-on: windows-latest
    
    steps:
    # Checkout the repository with LFS support enabled
    - name: Checkout website repo
      uses: actions/checkout@v3
      with:
        repository: RazorEnhanced/razorenhanced.github.io
        path: website_repo
        lfs: true  # Enable LFS during checkout to get the actual zip files
    
    # Debug the working directory and structure
    - name: Debug directory structure
      run: |
        Write-Host "Current directory: $pwd"
        Write-Host "Releases directory contents:"
        if (Test-Path "website_repo/releases") {
          Get-ChildItem website_repo/releases
        } else {
          Write-Host "Releases directory not found!"
        }
      shell: pwsh
    
    # Get the latest zip file directly from the repository
    - name: Find latest release file
      id: find_zip
      run: |
        # Check if releases directory exists
        if (-not (Test-Path "website_repo/releases")) {
          Write-Error "Releases directory not found!"
          exit 1
        }
        
        # Get the latest zip file by last modified date
        $latestZip = Get-ChildItem -Path "website_repo/releases" -Filter "RazorEnhanced-*.zip" | 
                     Where-Object { $_.Name -ne "RazorEnhanced-latest.zip" } |
                     Sort-Object -Property LastWriteTime -Descending | 
                     Select-Object -First 1
        
        if ($latestZip) {
          Write-Host "Found latest release: $($latestZip.Name) (Size: $($latestZip.Length) bytes)"
          echo "zip_file=$($latestZip.Name)" >> $env:GITHUB_OUTPUT
          
          # If file is still small, it might be an LFS pointer that wasn't properly downloaded
          if ($latestZip.Length -lt 1000000) {
            Write-Warning "ZIP file is suspiciously small for an application archive. LFS may not have downloaded properly."
            echo "use_fallback=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "use_fallback=false" >> $env:GITHUB_OUTPUT
          }
        } else {
          Write-Error "No release zip files found in the releases directory"
          echo "use_fallback=true" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      
    # Fall back to GitHub Releases API if LFS file download failed
    - name: Download from GitHub Releases (Fallback)
      if: steps.find_zip.outputs.use_fallback == 'true'
      uses: robinraju/release-downloader@v1.6
      with:
        repository: "RazorEnhanced/RazorEnhanced"
        latest: true
        fileName: "RazorEnhanced-*.zip"
    
    # Extract from local LFS file if available
    - name: Extract local ZIP file
      if: steps.find_zip.outputs.use_fallback != 'true'
      run: |
        # Create extraction directory
        New-Item -ItemType Directory -Path "extracted" -Force
        
        # Extract the zip
        $zipPath = "website_repo/releases/${{ steps.find_zip.outputs.zip_file }}"
        Write-Host "Extracting local ZIP: $zipPath"
        7z x "$zipPath" -o"./extracted"
      shell: pwsh
      
    # Extract from fallback download if needed
    - name: Extract downloaded ZIP (Fallback)
      if: steps.find_zip.outputs.use_fallback == 'true'
      run: |
        # Create extraction directory
        New-Item -ItemType Directory -Path "extracted" -Force
        
        # Find the downloaded zip file
        $downloadedZip = Get-ChildItem -Filter "RazorEnhanced-*.zip" | Select-Object -First 1
        Write-Host "Extracting downloaded ZIP: $($downloadedZip.Name)"
        7z x "$($downloadedZip.Name)" -o"./extracted"
      shell: pwsh
      
    - name: Display extracted files
      run: dir extracted
  
    # Try to run directly   
    - name: Run RE to trigger the creation of AutoComplete.json
      run: |
        cd extracted
        RazorEnhanced.exe --autoDocsOnly
        dir Config
      shell: cmd
    
    - name: Display directories
      run: dir extracted/Config/
      
    # Build Docs (use the AutoDoc.py file from the repository)
    - name: Run autodoc.py
      run: |
        cd extracted
        # Copy AutoDoc.py from the repository
        Copy-Item "../website_repo/doc/autodoc.py" -Destination "."
        # Run AutoDoc
        python autodoc.py
      shell: pwsh
    
    # Copy generated docs to the repository
    - name: Update repo documentation
      run: |
        Copy-Item -Path "extracted/doc/*" -Destination "website_repo/doc/" -Recurse -Force -Verbose
      shell: pwsh

# Use GitHub CLI for authentication and pushing
    - name: Commit and push changes
      run: |
        cd website_repo
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"

        # Stage changes
        git add doc/

        # Check if there are changes to commit
        if (git status --porcelain | Select-String -Pattern "doc/") {
          # Commit changes
          git commit -m "GitHub Actions build_docs"
          
          # Use GitHub CLI for authentication
          Write-Host "Authenticating with GitHub CLI..."
          echo "${{ secrets.DEPLOYMENT_TOKEN }}" | gh auth login --with-token
          
          # Verify auth status
          gh auth status
          
          # Push using GitHub CLI
          Write-Host "Pushing changes with GitHub CLI..."
          gh repo sync RazorEnhanced/razorenhanced.github.io
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Changes pushed successfully!"
          } else {
            Write-Host "Error pushing changes with GitHub CLI"
            exit 1
          }
        } else {
          Write-Host "No documentation changes to commit"
        }
      shell: pwsh